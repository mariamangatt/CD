%{
#include "y.tab.h"
%}

%%
[0-9]+      { yylval = atoi(yytext); return NUMBER; }
[ \t\n]     { /* ignore whitespace */ }
"+"         { return PLUS; }
"-"         { return MINUS; }
"*"         { return MULTIPLY; }
"/"         { return DIVIDE; }
"("         { return LPAREN; }
")"         { return RPAREN; }
.           { return yytext[0]; }

%%

int yywrap() {
    return 1;
}

%{
#include <stdio.h>
#include <stdlib.h>

void yyerror(const char *s);
int yylex(void);

%}

%token NUMBER
%token PLUS MINUS MULTIPLY DIVIDE
%token LPAREN RPAREN

%%
calculation:
    expression         { printf("Result = %d\n", $1); }
    ;

expression:
    expression PLUS term       { $$ = $1 + $3; }
    | expression MINUS term    { $$ = $1 - $3; }
    | term
    ;

term:
    term MULTIPLY factor       { $$ = $1 * $3; }
    | term DIVIDE factor       { $$ = $1 / $3; }
    | factor
    ;

factor:
    NUMBER                    { $$ = $1; }
    | LPAREN expression RPAREN { $$ = $2; }
    ;

%%

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main(void) {
    printf("Enter an expression: ");
    yyparse();
    return 0;
}
